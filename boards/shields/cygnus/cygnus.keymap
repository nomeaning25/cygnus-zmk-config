/*
*
* Copyright (c) 2024 Rafael Rom√£o
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define HOM_L 0
#define NAV_L 1
#define OTH_L 2
#define NUM_L 3
#define SYM_L 4
#define FUN_L 5
#define GAM_L 6

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td0: tap_dance_home {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp P>, <&to HOM_L>;
        };

        td_lshift: tap_dance_caps_l {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F>, <&sk LSHIFT>, <&kp CAPS>;
        };

        td_rshift: tap_dance_caps_r {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp J>, <&sk RSHIFT>, <&kp CAPS>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_bksp {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <17 18>;
            bindings = <&kp BKSP>;
        };
        combo_capslck {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <10 11>;
            bindings = <&kp CAPS>;
        };
        combo_tab {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
        combo_home_layer {
            timeout-ms = <50>;
            require-prior-idle-ms = <200>;
            key-positions = <9 33>;
            bindings = <&to HOM_L>;
            layers = <GAM_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            label = "Qwerty";
            bindings = <
                &kp Q      &kp W      &kp E             &kp R          &kp T            &kp Z            &kp U          &kp I       &kp O      &kp P
                &hm LGUI A &hm LALT S &hm LCTRL D       &td_lshift     &kp G            &kp H            &td_rshift     &hm RCTRL K &hm LALT L &hm LGUI QUOT
                &kp Y      &kp X      &kp C             &kp V          &kp B            &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH
                                      &lt NAV_L ESC     &lt NUM_L TAB  &lt SYM_L SPACE  &lt FUN_L RET    &kp BKSP       &lt OTH_L DEL       
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &none     &none         &none       &none          &none         &kp INS         &kp HOME       &kp UARW    &kp END    &none
                &kp LGUI   &kp LALT     &kp LCTRL   &kp LSHFT      &none         &kp PG_UP       &kp LARW       &kp DARW    &kp RARW   &none
                &none     &none         &none       &none          &none         &kp PG_DN       &kp HOME       &kp PG_DN   &kp PG_UP  &none
                                        &trans      &trans         &trans        &trans          &trans         &trans          
            >;
        };

        other_layer {
            label = "Other";
            bindings = <
                &none	        &none           &none           &none           &bt BT_CLR      &none           &none         &none       &none       &none
                &none           &none           &none           &none           &none           &none           &to GAM_L    &none       &none       &none
                &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &none           &none         &none       &none       &none
                                &trans           &trans          &trans          &trans          &trans         &trans       
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
                &none     &none         &none       &none          &none      &kp LBKT      &kp N7      &kp N8      &kp N9          &kp RBKT   
                &none     &none         &none       &none          &none      &kp EQUAL     &kp N4      &kp N5      &kp N6          &kp SEMI  
                &none     &none         &none       &none          &none      &kp BACKSLASH &kp N1      &kp N2      &kp N3          &kp GRAVE   
                                        &trans       &trans        &trans     &kp MINUS        &kp N0      &trans       
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &none     &none         &none       &none          &none    &kp LBRC     &kp LS(N7)  &kp LS(N8)  &kp LS(N9) &kp RBRC    
                &none     &none         &none       &none          &none    &kp PLUS    &kp LS(N4)  &kp LS(N5)  &kp LS(N6) &kp COLON    
                &none     &none         &none       &none          &none    &kp PIPE    &kp LS(N1)  &kp LS(N2)  &kp LS(N3) &kp TILDE
                                        &trans      &trans         &trans   &kp UNDER    &kp LPAR    &kp RPAR          
            >;
        };

        fun_layer {
            label = "Fun";
            bindings = <
                &kp F12     &kp F7     &kp F8      &kp F9     &kp PSCRN         &trans          &trans         &trans      &trans     &trans
                &kp F11     &kp F4     &kp F5      &kp F6     &kp SLCK          &trans          &trans         &trans      &trans     &trans
                &kp F10     &kp F1     &kp F2      &kp F3     &kp PAUSE_BREAK   &trans          &trans         &trans      &trans     &trans
                                       &none       &none      &none             &trans          &trans         &none        
            >;
        };

        gam_layer {
            label = "Gam";
            bindings = <
                &kp Q      &kp W      &kp E             &kp R          &kp T            &kp Z            &kp U          &kp I       &kp O      &td0
                &kp A      &kp S      &kp D             &kp F          &kp G            &kp H            &kp J          &kp K       &kp L      &kp QUOT
                &kp Y      &kp X      &kp C             &kp V          &kp B            &kp N            &kp M          &kp COMMA   &kp DOT    &kp FSLH
                                      &kp ESC           &kp TAB        &kp SPACE        &kp RET          &kp BKSP       &kp DEL        
            >;
        };
    };
};
